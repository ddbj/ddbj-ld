openapi: 3.0.1

info:
  title: JVar API
  description: "This is a JVar API definition."
  version: 1.0.0

externalDocs:
  description: Repository
  url: https://github.com/ddbj/ddbj-ld

servers:
  - url: https://ddbj.nig.ac.jp/api/jvar
  - url: https://ddbj-staging.nig.ac.jp/api/jvar

tags:
  - name: auth
  - name: entry
  - name: file
  - name: comment
paths:
  /auth/{code}/login:
    post:
      tags:
        - auth
      summary: login and get user info
      operationId: getLoginUserInfo
      parameters:
        - in: path
          name: code
          description: Authorization code for OAuth2 from OpenAM
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        401:
          description: Unauthorized
          content: {}
  /auth/{account_uuid}/refresh:
    post:
      tags:
        - auth
      summary: request new accessToken
      operationId: refreshAccessToken
      parameters:
        - in: path
          name: account_uuid
          description: t_account.uuid
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        400:
          description: Bad Request
          content: {}
  /entry:
    get:
      tags:
        - entry
      summary: Get entries
      description: Get entries to which login user belongs
      operationId: getEntries
      parameters:
        - in: header
          name: Authorization
          description: Authorization header
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntriesResponse"
        401:
          description: Unauthorized
          content: {}
    post:
      tags:
        - entry
      summary: Create new entry
      description: Create new entry
      operationId: createEntry
      parameters:
        - in: header
          name: Authorization
          description: Authorization header
          schema:
            type: string
          required: true
      requestBody:
        description: Entry information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntryRequest"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntryResponse"
        400:
          description: Bad Request
          content: {}
        401:
          description: Unauthorized
          content: {}
  /entry/{entry_uuid}:
    get:
      tags:
        - entry
      summary: Get entry detail information
      description: Get entry detail information
      operationId: getEntryInformation
      parameters:
        - in: header
          name: Authorization
          description: Authorization header
          schema:
            type: string
          required: true
        - in: path
          name: entry_uuid
          description: entry uuid
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntryInformationResponse"
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
        - entry
      summary: Delete entry width unsubmitted status
      description: Delete entry width unsubmitted status
      operationId: deleteEntry
      parameters:
        - in: header
          name: Authorization
          description: Authorization header
          schema:
            type: string
          required: true
        - in: path
          name: entry_uuid
          description: entry uuid
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Unauthorized
          content: {}
  /entry/{entry_uuid}/file/{file_type}/{file_name}/pre_upload:
    get:
      tags:
        - file
      summary: get upload token
      description: get token for upload
      operationId: getUploadToken
      parameters:
        - in: header
          name: Authorization
          description: Authorization header
          schema:
            type: string
          required: true
        - in: path
          name: entry_uuid
          description: entry uuid
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: file_type
          description: file type
          schema:
            type: string
          required: true
        - in: path
          name: file_name
          description: file name
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadTokenResponse"
        401:
          description: Unauthorized
          content: {}
        409:
          description: Conflicted
          content: {}
  /entry/{entry_uuid}/file/{file_type}/{file_name}/{upload_token}/upload:
    post:
      tags:
        - file
      summary: Upload file
      description: Upload file to a entity
      operationId: uploadFile
      parameters:
        - in: path
          name: entry_uuid
          description: entry uuid
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: file_type
          description: file type
          schema:
            type: string
          required: true
        - in: path
          name: file_name
          description: file name
          schema:
            type: string
          required: true
        - in: path
          name: upload_token
          description: upload token
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: successful operation
          content: {}
        401:
          description: Unauthorized
          content: {}
  /entry/{entry_uuid}/file/{file_type}/{file_name}:
    delete:
      tags:
        - file
      summary: Delete file
      description: Delete a file from a entry
      operationId: deleteFile
      parameters:
        - in: header
          name: Authorization
          description: Authorization header
          schema:
            type: string
          required: true
        - in: path
          name: entry_uuid
          description: entry uuid
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: file_type
          description: file type
          schema:
            type: string
          required: true
        - in: path
          name: file_name
          description: file name
          schema:
            type: string
          required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Bad Request
          content: {}
        401:
          description: Unauthorized
          content: {}
        409:
          description: Conflicted
          content: {}
  /entry/{entry_uuid}/comment:
    post:
      tags:
        - comment
      summary: Post a new comment
      description: Post a new comment
      operationId: postComment
      parameters:
        - in: header
          name: Authorization
          description: Authorization header
          schema:
            type: string
          required: true
        - in: path
          name: entry_uuid
          description: entry uuid
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        description: Comment information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        401:
          description: Unauthorized
          content: {}
  /entry/{entry_uuid}/comment/{comment_uuid}:
    post:
      tags:
        - comment
      summary: Update a comment
      description: Update a comment
      operationId: updateComment
      parameters:
        - in: header
          name: Authorization
          description: Authorization header
          schema:
            type: string
          required: true
        - in: path
          name: entry_uuid
          description: entry uuid
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: comment_uuid
          description: comment uuid
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        description: Comment information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        401:
          description: Unauthorized
          content: {}
    delete:
      tags:
        - comment
      summary: Delete a comment
      description: Delete a comment
      operationId: deleteComment
      parameters:
        - in: header
          name: Authorization
          description: Authorization header
          schema:
            type: string
          required: true
        - in: path
          name: entry_uuid
          description: entry uuid
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: comment_uuid
          description: comment uuid
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Bad Request
          content: {}
        401:
          description: Unauthorized
          content: {}
components:
  schemas:
    UserResponse:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        uid:
          type: string
        access_token:
          type: string
        mail:
          type: string
          format: email
        admin:
          type: boolean
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
    EntriesResponse:
      type: array
      items:
        $ref: "#/components/schemas/EntryResponse"
    EntryResponse:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          type: string
        validation_status:
          type: string
        isDeletable:
          type: boolean
    EntryRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
    EntryInformationResponse:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        label:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
        validation_status:
          type: string
        menu:
          $ref: "#/components/schemas/MenuResponse"
        admin_menu:
          $ref: "#/components/schemas/AdminMenuResponse"
        files:
          type: array
          items:
            $ref: "#/components/schemas/FileResponse"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/CommentResponse"
    FileResponse:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        url:
          type: string
        validation_uuid:
          type: string
          format: uuid
        validation_status:
          type: string
        type:
          type: string
    CommentResponse:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        comment:
          type: string
        author:
          type: string
    MenuResponse:
      type: object
      properties:
        validate:
          type: boolean
        submit:
          type: boolean
        request_to_public:
          type: boolean
        request_to_cancel:
          type: boolean
        request_to_update:
          type: boolean
    AdminMenuResponse:
      type: object
      properties:
        to_unsubmitted:
          type: boolean
        to_private:
          type: boolean
        to_public:
          type: boolean
        to_supressed:
          type: boolean
        to_killed:
          type: boolean
        to_replaced:
          type: boolean
    UploadTokenResponse:
      type: object
      properties:
        token:
          type: string
          format: uuid
    CommentRequest:
      type: object
      properties:
        comment:
          type: string
